索引与分区


索引的目的：提高数据的访问效率
   ******并不是索引总是好的，选择性高时用索引效率高**********


oracle索引类型
    --B-tree索引   B数索引（二叉树） 
          --通常有三层，搜索从根进入
          --高效的场景：索引字段有着很高的selectivity或者结果集很小的时候
	  --低效的场景：索引字段有着很低的selectivity或者结果集很大的时候
	  --基本上适合所有的数据库类型
	  --没有太明显的缺点（使用场合广）


    --Bitmap索引   位图索引
          --字段重复率高时以及OLAP适合使用
	  --DML频繁操作（容易锁定表）以及OLTP时不合适
          --位图索引创建
	         create   bitmap   index   indexName   on   tableName(columName)

          --DML操作影响一个索引段;
	  --在有bitmap的表中修改数据，会对所有的受影响的键值关联的记录做锁定！！！！！！！！！
          

    --TEXT index  全文索引
       create index indexName on tableName(columnName) indextype is ctxsys.context;

       使用场景：
          --b-tree，bitmap无法发挥作用的场景
	  --like  '%string%'

        缺点
	  --占用过大的磁盘空间
	  --维护成本高
	  --bug多



分区表的几点注意（作用主要体现在数据管理上，删除一个分区，则删除分区上的数据）
     --表分区后，分区变成各自的段，而表成一个逻辑名称
     --分区裁剪

     create table t_p(id int)
     partition by range(id)
     (partition p1 values less than(100),
      partition p2 values less than(200),
      partition pm values less than(maxvalue)
      );


分区种类
     --list        partitioning（种类比较少时采用）
     --range   partition(尤其时间)
     --hash     partition（数据不可控，容易做数据均匀构造）


分区组合（子分区）
  range-range
  list-range
  list-hash
  list-list


分区索引（误区：分区索引好于全局索引，分区索引与全局索引效率差不多，某些时候会更差）
    --local index（对分区而言）
       表的DML操作无需rebuil索引
       可以非常方便的管理数据
       

    --全局索引
       表的DDL操作会导致索引无效


分区索引与全局索引
       --分区索引的目的在与数据的管理而非性能
       --一个分区表上如果经常有DDL操作，将会导致全局索引无效，需要对索引重建，此时创建分区索引更加合适。







