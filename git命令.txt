--设置用户名
$ git config --global user.name "Your Name"  

--设置邮箱
$ git config --global user.email "email@example.com" 

--注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，
  当然也可以对某个仓库指定不同的用户名和Email地址。


/******************************初始化*****************************/
--初始化一个Git仓库,在当前目录下
$ git init


/******************************创建版本*****************************/
--添加文件到Git仓库，分两步：
$ git add [file1,[file2]...]|.      --可以为多个文件（或是. 表示当前目录所有文件）
$ git commit -m "版本说明"          --提交到当前分支上


/******************************查看状态*****************************/
--查看修改状态,命令可以让我们时刻掌握仓库当前的状态
$ git status 
$ git diff [head] .|filename        --可以查看修改内容


/******************************版本退回*****************************/
--显示从最近到最远的提交日志
$ git log [--pretty=oneline]
$ git reflog                        --显示commitId
$ git reset --hard HEAD~n|commitId  --退回n个版本


/******************************撤销修改*****************************/
--版本退回
  --场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令
     $ git checkout -- file|.

  --场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
    --第一步用命令
       $ git reset HEAD file         --就回到了场景1，
    --第二步按场景1操作。
       $ git checkout -- file

  --场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交,不过前提是没有推送到远程库
  $ git reset --hard HEAD~n|commitId



/******************************删除文件*****************************/
$ git rm test.txt
$ git commit -m "remove test.txt"
--恢复
$ git checkout -- test.txt
--git checkout其实是用版本库里的版本替换工作区的版本，
  无论工作区是修改还是删除，都可以“一键还原”。
--命令git rm用于删除一个文件。
  如果一个文件已经被提交到版本库，那么你永远不用担心误删，
  但是要小心，你只能恢复文件到最新版本，
  你会丢失最近一次提交后你修改的内容。



/******************************远程仓库*****************************/
第1步：创建SSH Key。
    在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
    如果已经有了，可直接跳到下一步。
    如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

    $ ssh-keygen -t rsa -C "youremail@example.com"
    
    如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，
    这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
    然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
    当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，
    只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。



/******************************添加远程仓库*****************************/
$ git remote add origin git@github.com:chenmingrang/testGit.git
   --origin远程仓库的名字(默认origin)

--把本地库的所有内容推送到远程库上：
$ git push -u origin master 
   --加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
     还会把本地的master分支和远程的master分支关联起来，
     在以后的推送或者拉取时就可以简化命令。

--只要本地作了提交，就可以通过命令:
  $ git push origin master
  把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！



/******************************从远程库克隆*****************************/
1.先建一个远程仓库
2.远程库已经准备好了，下一步是用命令git clone克隆一个本地库：
  $ git clone git@github.com:chenmingrang/gitskills.git




/******************************分支管理*****************************/
1.切换分支
  $ git checkout -b dev  
  --命令加上-b参数表示创建并切换:
    $ git branch dev
    $ git checkout dev -- 切换分支

2.查看当前分支
   $ git branch

3.删除分支
   $ git branch -d dev  --删除dev分支

4.合并分支
   $ git merge dev  --将dev上的成果合并到当前分支上 
 



/******************************冲突解决*****************************/
1.分支的合并情况
   $ git log --graph --pretty=oneline --abbrev-commit




/******************************分支管理策略*****************************/
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息

$ git merge --no-ff -m "merge with no-ff" dev
   --注意--no-ff参数，表示禁用Fast forward
   --因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。




/******************************Bug分支*****************************/
1.工作只进行到一半，还没法提交，预计完成还需1天时间。
  但是，必须在两个小时内修复该bug，怎么办？
  Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作:
  $ git stash

2.查看工作现场
  $ git stash list

3.恢复工作现场
  $ git stash apply stash@{0} --恢复到制定的stash
  $ git stash drop   --恢复后删除
  $ git stash pop    --恢复同时把stash内容也删除




/******************************多人协作*****************************/
1.查看远程仓库的信息
   $ git remote  --加上-v参数显示的更加详细

2.推送分支
   $ git push origin branch-name  --将本地分支(branch-name)推送到远程制定的分支

3.clone远程分支
   $ git checkout -b dev origin/dev  --创建远程origin的dev分支到本地
   














